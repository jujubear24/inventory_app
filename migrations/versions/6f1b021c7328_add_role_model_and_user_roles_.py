"""Add Role model and user_roles relationship

Revision ID: 6f1b021c7328
Revises: 0e960265f1cb
Create Date: 2025-04-21 17:57:47.608050

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '6f1b021c7328'
down_revision = '0e960265f1cb'
branch_labels = None
depends_on = None

role_table = sa.sql.table('role',
    sa.Column('id', sa.Integer),
    sa.Column('name', sa.String),
    sa.Column('description', sa.String)
)

user_roles_table = sa.sql.table('user_roles',
    sa.Column('user_id', sa.Integer),
    sa.Column('role_id', sa.Integer)
)

user_table = sa.sql.table('user',
    sa.Column('id', sa.Integer),
    sa.Column('is_admin', sa.Boolean) # Need the old column for the query
)




def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )

    # ### end Alembic commands ###

    # 1. Bulk insert the default roles
    op.bulk_insert(role_table,
        [
            {'id': 1, 'name': 'Admin', 'description': 'Administrator with full access'},
            {'id': 2, 'name': 'User', 'description': 'Standard user role'}
            # Add other default roles if needed
        ]
    )
    #  2. Assign 'Admin' role (assuming ID=1) to users where old is_admin was True
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Find the ID for the 'Admin' role (safer than assuming ID 1)
    try:
        result = session.execute(sa.select(role_table.c.id).where(role_table.c.name == 'Admin'))
        admin_role_id = result.scalar_one_or_none()

        if admin_role_id:
            # Use INSERT ... SELECT to populate user_roles for existing admins
            # Select user IDs where is_admin was true and insert into user_roles with admin_role_id
            op.execute(
                user_roles_table.insert().from_select(
                    ['user_id', 'role_id'],
                    sa.select(user_table.c.id, sa.literal(admin_role_id)).where(user_table.c.is_admin) # Or sa.true()
                )
            )
        else:
            # Handle case where 'Admin' role wasn't created (optional logging/warning)
            print("Warning: 'Admin' role not found, skipping role assignment.")

    finally:
        session.close() # Close the session
    
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('is_admin')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_admin', sa.BOOLEAN(), nullable=True, server_default=sa.false()))
    
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    try:
        result = session.execute(sa.select(role_table.c.id).where(role_table.c.name == 'Admin'))
        admin_role_id = result.scalar_one_or_none()
        if admin_role_id:
            op.execute(
                sa.update(user_table).where(
                    user_table.c.id == user_roles_table.c.user_id # Join condition
                ).where(
                    user_roles_table.c.role_id == admin_role_id # Filter for Admin role
                ).values(is_admin=True) # Set is_admin to true
            )
        else:
             print("Warning: 'Admin' role not found during downgrade, cannot set is_admin flag.")
    finally:
        session.close()



    op.drop_table('user_roles')
    op.drop_table('role')
    # ### end Alembic commands ###
